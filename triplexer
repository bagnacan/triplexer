#!/usr/bin/env python3

#
# module for launching triplexer pipeline operations
#


import logging
import microrna_org
import redis
import sys
from common import *
from cli import triplexer_parser



# logger
logger = logging.getLogger(TRIPLEXER)


# file logger
LOGFILE = FILE_PATH.joinpath(str(TRIPLEXER + ".log"))
logging.basicConfig(
    level = logging.DEBUG,
    format = "%(asctime)s %(name)-12s %(levelname)-8s %(message)s",
    datefmt = "%Y-%m-%d %H:%M",
    filename = LOGFILE,
    filemode = "w")


# console logger
console = logging.StreamHandler()
console.setLevel(logging.INFO)
formatter = logging.Formatter("%(message)s")
console.setFormatter(formatter)
logging.getLogger("").addHandler(console)


# operation launcher
launch = {
    MICRORNA_ORG : {
        OPT_INIT_NS: microrna_org.init_ns,
        OPT_READ: microrna_org.read,
        OPT_FILTRATE: microrna_org.filtrate
    }
}



# run the operation
#
def run(operation, cli_args):
    """
    Runs a triplexer operation.
    """

    ns_code = cli_args[OPT_NAMESPACE]
    ns = NAMESPACES[ns_code][STRING].split(SEPARATOR)[0]

    logger.info("Operation \"%s\" started", operation)
    launch[ns][operation](cache, cli_args)
    logger.info("Operation \"%s\" completed", operation)



# main
#
if __name__ == "__main__":

    # parse the command line invocation:
    parser = triplexer_parser()
    args, non_args = parser.parse_known_args()

    # no CLI arguments
    # ==> print the help and exit
    if len(sys.argv) == 1:
        parser.print_help(file=sys.stderr)
        sys.exit(0)

    # unrecognised CLI arguments
    # ==> print the help and exit
    if non_args:
        logger.error("Wrong command line invocation. Exiting")
        parser.print_help(file=sys.stderr)
        sys.exit(2)


    # collect CLI arguments
    cli_args = dict(vars(args))


    # underlying redis cache not reachable
    # ==> exit
    logger.info("Checking redis cache at %s", cli_args[OPT_DB])
    cache = redis.Redis(
        charset="utf-8", decode_responses=True,
        host=cli_args[OPT_DB].split(SEPARATOR)[0],
        port=cli_args[OPT_DB].split(SEPARATOR)[1],
        db=0)
    try:
        cache.ping()
    except redis.RedisError:
        logger.error("Redis instance not running. Exiting")
        sys.exit(2)


    # launch all operations given on the CLI
    for op in OPS:
        if op in cli_args.keys():
            run(op, cli_args)

